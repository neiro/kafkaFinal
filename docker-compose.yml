version: '3.8'
services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper1
    hostname: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_SASL_ENABLED: "true"
      ZOOKEEPER_AUTH_PROVIDER_1: "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: "sasl"
      KAFKA_OPTS: > 
        -Djava.security.auth.login.config=/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf 
        -Dzookeeper.allowSaslFailedClients=false 
        -Dzookeeper.requireClientAuthScheme=sasl
    volumes:
      - ./kafka/config:/etc/zookeeper/secrets:ro
      - zookeeper1_data:/var/lib/zookeeper/data
      - zookeeper1_log:/var/lib/zookeeper/log

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper2
    hostname: zookeeper2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_SASL_ENABLED: "true"
      ZOOKEEPER_AUTH_PROVIDER_1: "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: "sasl"
      KAFKA_OPTS: > 
        -Djava.security.auth.login.config=/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf 
        -Dzookeeper.allowSaslFailedClients=false 
        -Dzookeeper.requireClientAuthScheme=sasl
    volumes:
      - ./kafka/config:/etc/zookeeper/secrets:ro
      - zookeeper2_data:/var/lib/zookeeper/data
      - zookeeper2_log:/var/lib/zookeeper/log

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper3
    hostname: zookeeper3
    ports:
      - "2183:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_SASL_ENABLED: "true"
      ZOOKEEPER_AUTH_PROVIDER_1: "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: "sasl"
      KAFKA_OPTS: > 
        -Djava.security.auth.login.config=/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf 
        -Dzookeeper.allowSaslFailedClients=false 
        -Dzookeeper.requireClientAuthScheme=sasl
    volumes:
      - ./kafka/config:/etc/zookeeper/secrets:ro
      - zookeeper3_data:/var/lib/zookeeper/data
      - zookeeper3_log:/var/lib/zookeeper/log




  cert-generator:
    build:
      context: ./kafka
      dockerfile: Dockerfile.cert
    container_name: cert-generator  
    environment:
      - CA_PASSWORD=password
    volumes:
      - ./kafka/certs:/var/ssl/private
      - ./kafka/config:/var/ssl/private/config

  kafka1: &kafka_broker
    build: ./kafka
    container_name: kafka1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL
      KAFKA_LISTENERS: SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka1:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds      
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      # Kafka broker JAAS config for SASL/PLAIN with two users: admin and client
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar=7071:/etc/kafka/jmx-kafka.yml
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - ./kafka/certs/kafka1:/etc/kafka/secrets
      - ./prometheus/kafka_jmx.yml:/etc/kafka/jmx-kafka.yml:ro
      - ./prometheus/jmx_prometheus_javaagent.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar:ro
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3

  kafka2:
    <<: *kafka_broker
    container_name: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka2:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds     
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      # Kafka broker JAAS config for SASL/PLAIN with two users: admin and client
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar=7071:/etc/kafka/jmx-kafka.yml
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - ./kafka//certs/kafka2:/etc/kafka/secrets
      - kafka2_data:/var/lib/kafka/data
      - ./prometheus/kafka_jmx.yml:/etc/kafka/jmx-kafka.yml:ro
      - ./prometheus/jmx_prometheus_javaagent.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar:ro


  kafka3:
    <<: *kafka_broker
    container_name: kafka3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka3:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181     
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka3.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka3.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds    
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      # Kafka broker JAAS config for SASL/PLAIN with two users: admin and client
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar=7071:/etc/kafka/jmx-kafka.yml
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - ./kafka/certs/kafka3:/etc/kafka/secrets
      - kafka3_data:/var/lib/kafka/data
      - ./prometheus/kafka_jmx.yml:/etc/kafka/jmx-kafka.yml:ro
      - ./prometheus/jmx_prometheus_javaagent.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar:ro      
 


  kafka-connect:
    build: ./kafka-connect
    container_name: kafka-connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";
      CONNECT_SSL_TRUSTSTORE_LOCATION: /certs/kafka1.truststore.jks
      CONNECT_SSL_TRUSTSTORE_PASSWORD: changeit
      CONNECT_SSL_KEYSTORE_LOCATION: /certs/kafka1.keystore.jks
      CONNECT_SSL_KEYSTORE_PASSWORD: changeit
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: /usr/share/java
    volumes:
      - ./kafka/certs/kafka1:/certs:ro
      - ./kafka-connect/config/elastic-sink.json:/etc/kafka-connect/elastic-sink.json:ro
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  mirror-maker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-mirror-maker
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    volumes:
      - ./kafka/config/mm-source.properties:/etc/kafka/mm-source.properties:ro
      - ./kafka/config/mm-target.properties:/etc/kafka/mm-target.properties:ro
    command: >
      bash -c "kafka-mirror-maker --consumer.config /etc/kafka/mm-source.properties 
              --producer.config /etc/kafka/mm-target.properties 
              --whitelist 'products,orders'"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.3
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"

  shop-api:
    build: ./shop-api
    container_name: shop-api
    depends_on:
      - kafka1
    environment:
      BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093
      SECURITY_PROTOCOL: SASL_SSL
      SASL_MECHANISM: PLAIN
      SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
      SSL_TRUSTSTORE: /certs/kafka1.truststore.jks
      SSL_TRUSTSTORE_PASSWORD: changeit
      TOPIC: products_raw
      DATA_FILE: /app/data/products.json
    volumes:
      - ./kafka/certs/kafka1:/certs:ro
      - ./shop-api/data/products.json:/app/data/products.json:ro

  client-api:
    build: ./client-api
    container_name: client-api
    depends_on:
      - kafka1
      - elasticsearch
    volumes:
      - ./kafka/certs/ca.crt:/certs/ca.crt:ro
    stdin_open: true
    tty: true

  kafka-streams:
    build: ./kafka-streams
    container_name: kafka-streams-app
    depends_on:
      - kafka1
    environment:
      BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093
      APPLICATION_ID: filter-app
      INPUT_TOPIC: products_raw
      OUTPUT_TOPIC: products
      BANNED_FILE: /app/config/banned.txt
      SECURITY_PROTOCOL: SASL_SSL
      SASL_MECHANISM: PLAIN
      SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";
      SSL_TRUSTSTORE: /certs/kafka1.truststore.jks
      SSL_TRUSTSTORE_PASSWORD: changeit
    volumes:
      - ./kafka/certs/kafka1:/certs:ro
      - ./kafka-streams/config/banned.txt:/app/config/banned.txt:ro

  spark-app:
    build: ./spark-app
    container_name: spark-app
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - namenode
    environment:
      BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093
      CHECKPOINT_DIR: hdfs://namenode:9000/spark-checkpoints
      SECURITY_PROTOCOL: SASL_SSL
      SASL_MECHANISM: PLAIN
      SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";
      SSL_TRUSTSTORE_LOCATION: /certs/kafka1.truststore.jks
      SSL_TRUSTSTORE_PASSWORD: changeit
      SSL_KEYSTORE_LOCATION: /certs/kafka1.keystore.jks
      SSL_KEYSTORE_PASSWORD: changeit
      SSL_KEY_PASSWORD: changeit
      TOPIC_IN: orders
      TOPIC_OUT: order_stats
    volumes:
      - ./kafka/certs/kafka1:/certs:ro

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - NAMENODE_CONF_dfs_namenode_name_dir=file:///hadoop/dfs/name
      - DFS_REPLICATION=1
    ports:
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - DATANODE_CONF_dfs_datanode_data_dir=file:///hadoop/dfs/data
      - DFS_REPLICATION=1
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    depends_on:
      - kafka1
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    depends_on:
      - prometheus

volumes:
  zookeeper1_data:
  zookeeper1_log:
  zookeeper2_data:
  zookeeper2_log:
  zookeeper3_data:
  zookeeper3_log:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  hadoop_namenode:
  hadoop_datanode:
